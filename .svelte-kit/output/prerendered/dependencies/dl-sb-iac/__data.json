{"type":"data","nodes":[null,{"type":"data","data":[{"repoDetails":1,"readme":16,"meta":17},{"id":2,"name":3,"user":4,"url":5,"description":6,"isFork":7,"createdAt":8,"updatedAt":9,"homepage":10,"language":11,"license":12,"size":13,"stars":14,"forks":14,"issues":14,"topics":15,"archived":7,"has_pages":7},926039718,"dl-sb-iac","Lissy93","https://github.com/Lissy93/dl-sb-iac","⚙️ The IaC for Domain Locker's Supabase setup",false,"2025-02-02T12:03:07Z","2025-06-17T22:03:21Z","","TypeScript","MIT",151,0,[],"\n       ____                        _         _               _             \n      |  _ \\  ___  _ __ ___   __ _(_)_ __   | |    ___   ___| | _____ _ __ \n      | | | |/ _ \\| '_ ` _ \\ / _` | | '_ \\  | |   / _ \\ / __| |/ / _ \\ '__|\n      | |_| | (_) | | | | | | (_| | | | | | | |__| (_) | (__|   \u003C  __/ |   \n      |____/ \\___/|_| |_| |_|\\__,_|_|_| |_| |_____\\___/ \\___|_|\\_\\___|_|   \n                                                                           \n\n>> This repo contains the config, schema and edge functions for Domain Locker \u003C\u003C\n>> For the main project and app, see https://github.com/lissy93/domain-locker \u003C\u003C\n\n================================================================================\nDIRECTORY STRUCTURE\n================================================================================\ndomain-locker-edge/\n├─ supabase/\n│  ├─ functions/    # Deno Edge functions\n│  ├─ migrations/   # Database schema\n│  ├─ templates/    # Mailer templates\n│  ╰─ config.toml   # Supabase configuration\n├─ .github/         # Repo admin, and GH Actions\n│  ├─ workflows/    # CI/CD files for deployment\n│  ╰─ README.txt    # You're looking at it ;)\n├─ Makefile         # Project commands\n├─ deno.json        # Deno project config\n╰─ .gitignore       # Stuff to not commit\n\n================================================================================\nDEVELOPING\n================================================================================\nPre-requisites:\n  - Install Git, Deno, Supabase CLI, Postgres and Docker on your local machine\n  - Deploy a Supabase instance. See https://supabase.io/docs/guides/self-hosting\n  - Configure all the required environmental variables for services (see below)\n\nProject setup:\n  git clone git@github.com:Lissy93/domain-locker-edge.git\n  supabase link --project-ref PROJECT_REF\n\nDevelopment:\n  supabase start\n  supabase status\n  supabase functions serve\n\n================================================================================\nDEPLOYING\n================================================================================\nsupabase secrets set-from-env   # Set environments\nsupabase config push            # Apply configuration\nsupabase db push                # Deploy schema\nsupabase functions deploy       # Deploy functions\n\nSee the `Makefile` for all deployment commands.\n\nThe easiest way to deploy is via GitHub Actions, which we use for CI/CD. \nJust push to main or trigger the supabase.yml workflow, and it will deploy\n\nYou'll need to configure the following GitHub secrets to authenticate:\n  SUPABASE_PROJECT_ID     - The Supabase project ID\n  SUPABASE_ACCESS_TOKEN   - The Supabase access token\n  SUPABASE_DB_PASSWORD    - The Postgres password for your Supabase DB\n  SUPABASE_ENV_FILE       - Raw text env vars for all else you need (see below)\n\n================================================================================\nENVIRONMENT VARIABLES\n================================================================================\nSupabase:\n  DB_URL - The URL to your Supabase instance and project\n  DB_KEY - The anon key to your new Supabase project\n\nAuthentication\n  SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID   - Google OAuth Client ID\n  SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET      - Google OAuth Secret\n  SUPABASE_AUTH_EXTERNAL_FACEBOOK_CLIENT_ID - Facebook OAuth Client ID\n  SUPABASE_AUTH_EXTERNAL_FACEBOOK_SECRET    - Facebook OAuth Secret\n  SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID   - GitHub OAuth Client ID\n  SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET      - GitHub OAuth Secret\n\nAPI Endpoints:\n  AS93_DOMAIN_INFO_URL  - The URL to our external domain info API\n  AS93_DOMAIN_INFO_KEY  - And the key for the domain info API\n  AS93_SPONSORS_API     - The URL to our GitHub sponsors API\n\nWorker Endpoints:\n  WORKER_DOMAIN_UPDATER_URL - The URL to domain-updater function\n  WORKER_SEND_NOTIFICATION_URL - The URL to send-notification function\n\nStripe:\n  STRIPE_SECRET_KEY - Stripe secret key (starting with sk_live_ or sk_test_)\n  STRIPE_WEBHOOK_SECRET - Stripe webhook secret (starting with whsec_)\n\nStripe Prices:\n  STRIPE_PRICE_HM - Stripe price ID for the hobby monthly plan (starting price_)\n  STRIPE_PRICE_HA - Price ID for the hobby annual plan\n  STRIPE_PRICE_PM - Price ID for the pro monthly plan\n  STRIPE_PRICE_PA - Price ID for the pro annual plan\n\nResend:\n  RESEND_API_KEY - The API key for the Resend service (send access)\n  RESEND_SENDER - The sender email for Resend\n\nTwilio:\n  TWILIO_SID - Twilio account SID\n  TWILIO_AUTH_TOKEN - Twilio auth token\n  TWILIO_PHONE_NUMBER - Twilio phone number\n  TWILIO_WHATSAPP_NUMBER - Twilio WhatsApp number\n\nTelegram\n  TELEGRAM_BOT_TOKEN - The token for the telegram notification bot\n\nIt's advisable to use a secret store for this. We use Supabase Vault.\nOr, you can pass secrets to Supabase, by running:\nsupabase secrets set --env-file supabase/functions/.env\n\n================================================================================\nFUNCTIONS\n================================================================================\nStripe and Billing:\n- cancel-subscription Cancels a user's subscription\n- checkout-session    Creates a new checkout session for a subscription\n- stripe-webhook      Handles incoming events triggered from Stripe\n- new-user-billing    Adds a billing record for new users + checks if sponsor\n\nUser Management:\n- delete-account      Deletes a user account and all associated data\n- export-data         Exports all (selected) data for a user in a given format\n\nDomain Management:\n- trigger-updates     Selects all domains for users, and triggers domain-updater\n- domain-updater      Updates domains with latest info, triggers notifications\n- send-notification   Sends a notification to user id with message\n- website-monitor     Gets response info for each (pro) domain, updates db\n\nInfo Routes:\n- domain-info         Fetches all info for any given domain name\n- domain-subs         Fetches all subdomains for any given domain\n\n================================================================================\nCRON JOBS\n================================================================================\nWe use crons to trigger some functions at specific times via pg_cron in Posthres\nThis is used for keeping the domain info up-to-date, and for monitoring websites\n\nJOB 1 - Trigger domain updates at 04:00 every day\n  - Schedule: 0 4 * * *\n  - Nodename: localhost\n  - Nodeport: 5432\n  - Database: postgres\n  - Username: postgres\n  - Job Name: run_domain_update_job\n  - Endpoint: https://[supabase-instance]/functions/v1/trigger-updates\n\nJOB 2 - Trigger website monitor every hour\n  - Schedule: 0 * * * *\n  - Nodename: localhost\n  - Nodeport: 5432\n  - Database: postgres\n  - Username: postgres\n  - Job Name: run_website_monitor_job\n  - Endpoint: https://[supabase-instance]/functions/v1/website-monitor\n\nExample SQL for cron job:\n  SELECT\n    net.http_post(\n      url := '[url to endpoint]',\n      headers := jsonb_build_object(\n        'Content-Type', 'application/json',\n        'Authorization', 'Bearer YOUR_API_KEY'\n      ),\n      body := '{}'::jsonb,\n      timeout_milliseconds := 5000\n    ) AS request_id;\n\n================================================================================\nSUPPORT\n================================================================================\nWe do not provide support for this codebase. It is provided as-is.\nIf you need help, please refer to the official docs for the services used.\nWe are not accepting feature requests or bug reports (except security issues).\n\nThe difficulty of deploying this project is graded at moderate to hard\nYou'll need a solid understanding of Deno, Supabase, Postgres and Docker\n\nIt is also possible to run Domain Locker without Supabase, using Postgres only.\n\n================================================================================\nNOTES\n================================================================================\nFor troubleshooting, ensure protocol, method, port, headers and body are correct\nYou must set and upload ALL environmental variables properly for things to work\nAvoid configuring in the Supabase UI, instead update the TOML file and re-deploy\n\nExample CURL request:\n  curl -i --location \\\n    --request POST 'https://[project].supabase.co/functions/v1/hello-world' \\\n    --header 'Authorization: Bearer xxxxx' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"name\":\"Dino\"}'\n\nOr, for local dev, the URL would be: 127.0.0.1:54321/functions/v1/hello-world\n\nIt is your responsibility to maintain, secure and backup your Supabase instance\n\n================================================================================\nLICENSE\n================================================================================\nCopyright (c) 2025 Alicia Sykes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n================================================================================\nABOUT\n================================================================================\nCoded with ❤ and ♨ by Alicia Sykes                      https://aliciasykes.com\nBuilt for Domain Locker                                https://domain-locker.com\n\n                        Thanks for being here! (●'◡'●)\n================================================================================\n                                              __\n                                             /°_)\n                                    _.----._/ /\n                                   /         /\n                                __/ (  | (  |\n                               /__.-'|_|--|_|\n",{}],"uses":{"params":["repo"]}}]}
