{"type":"data","nodes":[null,{"type":"data","data":[{"repoDetails":1,"readme":18,"meta":19},{"id":2,"name":3,"user":4,"url":5,"description":6,"isFork":7,"createdAt":8,"updatedAt":9,"homepage":10,"language":11,"license":12,"size":13,"stars":14,"forks":15,"issues":16,"topics":17,"archived":7,"has_pages":7},42300149,"stream-tweets","Lissy93","https://github.com/Lissy93/stream-tweets","A Node module that uses the Twitter API to stream Tweets in real-time",false,"2015-09-11T09:35:33Z","2017-12-30T16:42:27Z","","JavaScript","NOASSERTION",19,5,0,1,[],"\n# stream-tweets\n> A node.js module for streaming Tweets live using the Twitter streaming API's\n\n[![Build Status](https://travis-ci.org/Lissy93/stream-tweets.svg?branch=dev)](https://travis-ci.org/Lissy93/stream-tweets)\n\n## Install\n```npm install stream-tweets```\n\n## Set Up\nInclude the module in your code: ` var StreamTweets = require('stream-tweets'); `\n\nCreate a file (if you haven't already), for your API keys, and add your Twitter credentials in there.\n\n```javascript\nmodule.exports.twitterKeys = {\n    consumer_key :      'XXXXXXXXXXXXXXXXXXXXXXXXX',\n    consumer_secret :   'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n    token:              'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n    token_secret:       'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n};\n```\n\nInclude your Twitter keys module, and create a new instance of stream-tweets\n\n```javascript\nvar credentials = require('./config/api-keys').twitterKeys;\n\nvar st = new StreamTweets(credentials);\n```\n\nDone, now ready to strart streaming!\n## Basic Usage\nThis code will continue returning a live stream of all Tweets containing the word 'JavaScript', in real-time.\n```\nst.stream('JavaScript', function(results){\n    console.log(results); // Do awesome stuff with the results here\n});\n```\n\n## Stream by location\nThis example will return a live stream of real-time Tweets from San Fransisco.\n```\nst.stream({locations: [-122.75,36.8,-121.75,37.8]}, function(results){\n    console.log(results); \n});\n```\nYou can also select Tweets from multiple locations, just by listing more latitudes and longitudes in the array.\n\n## More Streaming paramaters\nAll the options listed on the official [Twitter streaming API documentation] are availible in this module.\n\n\n## The Output\nBy defualt stream-tweets will return just the usefull stuff. An example output will follow this format:\n```javascript\n{ date: 'Sun Sep 13 08:48:18 +0000 2015',\n  body: 'RT @jsconfasia: Princiya Sequeira; loves JavaScript and can hack D3.js to death! Read more about Princiya on http://t.co/3phJjnObkr http://…',\n  location: { geo: null, coordinates: null, place: null },\n  'retweet-count': 0,\n  'favorited-count': 0,\n  lang: 'en' }\n{ date: 'Sun Sep 13 08:48:19 +0000 2015',\n  body: 'nodenow: Who likes late night coding? #developer #java #javascript #code #coding #programming #adwords #api… … http://t.co/rvoRGmj9Zx',\n  location: { geo: null, coordinates: null, place: null },\n  'retweet-count': 0,\n  'favorited-count': 0,\n  lang: 'en' }\n{ date: 'Sun Sep 13 08:48:22 +0000 2015',\n  body: 'RT @_ericelliott: Advanced Performance Audits with DevTools: http://t.co/UaPoJEFNo0 by @paul_irish #js #JavaScript',\n  location: { geo: null, coordinates: null, place: null },\n  'retweet-count': 0,\n  'favorited-count': 0,\n  lang: 'en' }\n  ```\n  \n  You want the full output returned by Twitter? No problem! Just set the second paramater to false when creating an instance of StreamTweets. Like this:\n```javascript \nvar st = new StreamTweets(credentials, false);\n```\n\n## Building\nstream-tweets uses Gulp to prepare all files\n- ```gulp build``` - Lints and compiles all CoffeeScript into JavaScript \n- ```gulp test``` - Run unit and coverage tests\n- ```gulp``` - Watches files for changes, cleans working directory, builds project and tests then continues watching\n\nSee gulpfile.js for full documentation\n\n## Testing\n```npm test```\n\nAfter tests are run, see reports directory for full and detailed test reports.\n\nVeiw the [Continuous integration testing report on Travis]\n\nMocha, Chai, Istanbul, Sinon.js, MochaAwesome and Travis CI have been used in the test environment\n\nLicense\n----\nMIT (C) [Alicia Sykes]\n\n[View full license]\n\n\n[//]: # (LINKS)\n   [Twitter streaming API documentation]: \u003Chttps://dev.twitter.com/streaming/overview/request-parameters>\n   [Continuous integration testing report on Travis]: \u003Chttps://travis-ci.org/Lissy93/stream-tweets>\n   [View full license]: \u003CLICENSE.MD>\n   [Alicia Sykes]: \u003Chttp://aliciasykes.com>\n\n",{}],"uses":{"params":["repo"]}}]}
